<?php

//Не используйте сдвиг вправо более чем на 32 бита на 32-битных системах. 
//Не используйте сдвиг влево для получения чисел, требующих для записи более 32 бит.
//Используйте функции из расширения gmp для побитовых операций над числами, большими 
//чем PHP_INT_MAX.

/**
 * bit_operations  description
 *
 * @author Kudryashov Sergey iden.82@gmail.com
 * 
 * 
 * --- СДВИГ ВПРАВО НАД ПОЛОЖИТЕЛЬНЫМИ ЦЕЛЫМИ ЧИСЛАМИ ---
Выражение: 2 = 4 >> 1
 Десятичный вид:
  val=4
  res=2
 Двоичный вид:
  val=00000000000000000000000000000100
  res=00000000000000000000000000000010
 ЗАМЕЧАНИЕ: слева была вставлена копия знакового бита 

Выражение: 1 = 4 >> 2
 Десятичный вид:
  val=4
  res=1
 Двоичный вид:
  val=00000000000000000000000000000100
  res=00000000000000000000000000000001

Выражение: 0 = 4 >> 3
 Десятичный вид:
  val=4
  res=0
 Двоичный вид:
  val=00000000000000000000000000000100
  res=00000000000000000000000000000000
 ЗАМЕЧАНИЕ: биты были выдвинуты за правый край

Выражение: 0 = 4 >> 4
 Десятичный вид:
  val=4
  res=0
 Двоичный вид:
  val=00000000000000000000000000000100
  res=00000000000000000000000000000000
 ЗАМЕЧАНИЕ: то же, что и выше; нельзя сдвинуть дальше 0


--- СДВИГ ВПРАВО НА ОТРИЦАТЕЛЬНЫХ ЦЕЛЫХ ЧИСЛАХ ---
Выражение: -2 = -4 >> 1
 Десятичный вид:
  val=-4
  res=-2
 Двоичный вид:
  val=11111111111111111111111111111100
  res=11111111111111111111111111111110
 ЗАМЕЧАНИЕ: слева была вставлена копия знакового бита

Выражение: -1 = -4 >> 2
 Десятичный вид:
  val=-4
  res=-1
 Двоичный вид:
  val=11111111111111111111111111111100
  res=11111111111111111111111111111111
 ЗАМЕЧАНИЕ: биты были выдвинуты за правый край

Выражение: -1 = -4 >> 3
 Десятичный вид:
  val=-4
  res=-1
 Двоичный вид:
  val=11111111111111111111111111111100
  res=11111111111111111111111111111111
 ЗАМЕЧАНИЕ: то же, что и выше; нельзя сдвинуть дальше -1


--- СДВИГ ВЛЕВО НАД ПОЛОЖИТЕЛЬНЫМИ ЦЕЛЫМИ ЧИСЛАМИ ---
Выражение: 8 = 4 << 1
 Десятичный вид:
  val=4
  res=8
 Двоичный вид:
  val=00000000000000000000000000000100
  res=00000000000000000000000000001000
 ЗАМЕЧАНИЕ: правый край был дополнен нулями

Выражение: 1073741824 = 4 << 28
 Десятичный вид:
  val=4
  res=1073741824
 Двоичный вид:
  val=00000000000000000000000000000100
  res=01000000000000000000000000000000

Выражение: -2147483648 = 4 << 29
 Десятичный вид:
  val=4
  res=-2147483648
 Двоичный вид:
  val=00000000000000000000000000000100
  res=10000000000000000000000000000000
 ЗАМЕЧАНИЕ: знаковые биты были выдвинуты

Выражение: 0 = 4 << 30
 Десятичный вид:
  val=4
  res=0
 Двоичный вид:
  val=00000000000000000000000000000100
  res=00000000000000000000000000000000
 ЗАМЕЧАНИЕ: биты были выдвинуты за левый край


--- СДВИГ ВЛЕВО НАД ОТРИЦАТЕЛЬНЫМИ ЦЕЛЫМИ ЧИСЛАМИ ---
Выражение: -8 = -4 << 1
 Десятичный вид:
  val=-4
  res=-8
 Двоичный вид:
  val=11111111111111111111111111111100
  res=11111111111111111111111111111000
 ЗАМЕЧАНИЕ: правый край был дополнен нулями

Выражение: -2147483648 = -4 << 29
 Десятичный вид:
  val=-4
  res=-2147483648
 Двоичный вид:
  val=11111111111111111111111111111100
  res=10000000000000000000000000000000

Выражение: 0 = -4 << 30
 Десятичный вид:
  val=-4
  res=0
 Двоичный вид:
  val=11111111111111111111111111111100
  res=00000000000000000000000000000000
 ЗАМЕЧАНИЕ: биты были выдвинуты за левый край, включая знаковый бит

Результат выполнения данного примера на 64-битных машинах:

--- СДВИГ ВПРАВО НАД ПОЛОЖИТЕЛЬНЫМИ ЦЕЛЫМИ ЧИСЛАМИ ---
Выражение: 2 = 4 >> 1
 Десятичный вид:
  val=4
  res=2
 Двоичный вид:
  val=0000000000000000000000000000000000000000000000000000000000000100
  res=0000000000000000000000000000000000000000000000000000000000000010
 ЗАМЕЧАНИЕ: слева была вставлена копия знакового бита

Выражение: 1 = 4 >> 2
 Десятичный вид:
  val=4
  res=1
 Двоичный вид:
  val=0000000000000000000000000000000000000000000000000000000000000100
  res=0000000000000000000000000000000000000000000000000000000000000001

Выражение: 0 = 4 >> 3
 Десятичный вид:
  val=4
  res=0
 Двоичный вид:
  val=0000000000000000000000000000000000000000000000000000000000000100
  res=0000000000000000000000000000000000000000000000000000000000000000
 ЗАМЕЧАНИЕ: биты были выдвинуты за правый край

Выражение: 0 = 4 >> 4
 Десятичный вид:
  val=4
  res=0
 Двоичный вид:
  val=0000000000000000000000000000000000000000000000000000000000000100
  res=0000000000000000000000000000000000000000000000000000000000000000
 ЗАМЕЧАНИЕ: то же, что и выше; нельзя сдвинуть дальше 0


--- СДВИГ ВПРАВО НАД ОТРИЦАТЕЛЬНЫМИ ЦЕЛЫМИ ЧИСЛАМИ ---
Выражение: -2 = -4 >> 1
 Десятичный вид:
  val=-4
  res=-2
 Двоичный вид:
  val=1111111111111111111111111111111111111111111111111111111111111100
  res=1111111111111111111111111111111111111111111111111111111111111110
 ЗАМЕЧАНИЕ: слева была вставлена копия знакового бита

Выражение: -1 = -4 >> 2
 Десятичный вид:
  val=-4
  res=-1
 Двоичный вид:
  val=1111111111111111111111111111111111111111111111111111111111111100
  res=1111111111111111111111111111111111111111111111111111111111111111
 ЗАМЕЧАНИЕ: биты были выдвинуты за правый край

Выражение: -1 = -4 >> 3
 Десятичный вид:
  val=-4
  res=-1
 Двоичный вид:
  val=1111111111111111111111111111111111111111111111111111111111111100
  res=1111111111111111111111111111111111111111111111111111111111111111
 ЗАМЕЧАНИЕ: то же, что и выше; нельзя сдвинуть дальше -1


--- СДВИГ ВЛЕВО НАД ПОЛОЖИТЕЛЬНЫМИ ЦЕЛЫМИ ЧИСЛАМИ ---
Выражение: 8 = 4 << 1
 Десятичный вид:
  val=4
  res=8
 Двоичный вид:
  val=0000000000000000000000000000000000000000000000000000000000000100
  res=0000000000000000000000000000000000000000000000000000000000001000
 ЗАМЕЧАНИЕ: правый край был дополнен нулями

Выражение: 4611686018427387904 = 4 << 60
 Десятичный вид:
  val=4
  res=4611686018427387904
 Двоичный вид:
  val=0000000000000000000000000000000000000000000000000000000000000100
  res=0100000000000000000000000000000000000000000000000000000000000000

Выражение: -9223372036854775808 = 4 << 61
 Десятичный вид:
  val=4
  res=-9223372036854775808
 Двоичный вид:
  val=0000000000000000000000000000000000000000000000000000000000000100
  res=1000000000000000000000000000000000000000000000000000000000000000
 ЗАМЕЧАНИЕ: знаковые биты были выдвинуты

Выражение: 0 = 4 << 62
 Десятичный вид:
  val=4
  res=0
 Двоичный вид:
  val=0000000000000000000000000000000000000000000000000000000000000100
  res=0000000000000000000000000000000000000000000000000000000000000000
 ЗАМЕЧАНИЕ: биты были выдвинуты за левый край


--- СДВИГ ВЛЕВО НАД ОТРИЦАТЕЛЬНЫМИ ЦЕЛЫМИ ЧИСЛАМИ ---
Выражение: -8 = -4 << 1
 Десятичный вид:
  val=-4
  res=-8
 Двоичный вид:
  val=1111111111111111111111111111111111111111111111111111111111111100
  res=1111111111111111111111111111111111111111111111111111111111111000
 ЗАМЕЧАНИЕ: правый край был дополнен нулями

Выражение: -9223372036854775808 = -4 << 61
 Десятичный вид:
  val=-4
  res=-9223372036854775808
 Двоичный вид:
  val=1111111111111111111111111111111111111111111111111111111111111100
  res=1000000000000000000000000000000000000000000000000000000000000000

Выражение: 0 = -4 << 62
 Десятичный вид:
  val=-4
  res=0
 Двоичный вид:
  val=1111111111111111111111111111111111111111111111111111111111111100
  res=0000000000000000000000000000000000000000000000000000000000000000
 ЗАМЕЧАНИЕ: биты были выдвинуты за левый край, включая знаковый бит


 */

/**
 * Все типы побитовых операций в php
 */
//$a & $b 	И 	Устанавливаются только те биты, которые установлены и в $a, и в $b.
//$a | $b 	Или 	Устанавливаются те биты, которые установлены в $a или в $b.
//$a ^ $b 	Исключающее или 	Устанавливаются только те биты, которые установлены 
//либо только в $a, либо только в $b, но не в обоих одновременно.
//~ $a 	Отрицание 	Устанавливаются те биты, которые не установлены в $a, и наоборот.
//$a << $b 	Сдвиг влево 	Все биты переменной $a сдвигаются на $b позиций влево 
//(каждая позиция подразумевает "умножение на 2")
//$a >> $b 	Сдвиг вправо 	Все биты переменной $a сдвигаются на $b позиций вправо 
//(каждая позиция подразумевает "деление на 2")

/*
 * Несколько примеров.
 */
$val = 4; //00000000000000000000000000000100
$places = '';
$res = ~$val;// -5 т.е 11111111111111111111111111111011
p($res, $val, '~', $places, '~ - отрицание', $res);


//Побитовое исключающее ИЛИ (или побитовое сложение по модулю два) — это бинарная операция, 
//действие которой эквивалентно применению логического исключающего ИЛИ к каждой паре битов,
//которые стоят на одинаковых позициях в двоичных представлениях операндов. 
//Другими словами, если соответствующие биты операндов различны, то двоичный разряд 
//результата равен 1; если же биты совпадают, то двоичный разряд результата равен 0.
//
//Пример:
//Искл. ИЛИ 	0011
//              0101
//Результат     0110
$val = 4; //00000000000000000000000000000100
$places = 2;
$res = $val ^ $places; // 6 т.е. 00000000000000000000000000000110
p($res, $val, '^', $places, '^ - xor(исключающее или)', $res);


//Побитовое ИЛИ (OR)
//Побитовое ИЛИ — это бинарная операция, действие которой эквивалентно применению 
//логического ИЛИ к каждой паре битов, которые стоят на одинаковых позициях в 
//двоичных представлениях операндов. Другими словами, если оба соответствующих бита 
//операндов равны 0, двоичный разряд результата равен 0; если же хотя бы один бит из
//пары равен 1, двоичный разряд результата равен 1.
//
//Пример:
//ИЛИ        0011
//           0101
//Результат  0111
$val = 4; //00000000000000000000000000000100
$places = 2;
$res = $val | $places; // 6 т.е. 00000000000000000000000000000110
p($res, $val, '|', $places, '| - or(или)', $res);


//Побитовое И (AND)
//
//Побитовое И — это бинарная операция, действие которой эквивалентно применению логического 
//И к каждой паре битов, которые стоят на одинаковых позициях в двоичных представлениях операндов. 
//Другими словами, если оба соответствующих бита операндов равны 1, результирующий двоичный разряд 
//равен 1; если же хотя бы один бит из пары равен 0, результирующий двоичный разряд равен 0.
//
//Пример:
//И         0011
//          0101
//Результат 0001
$val = 4; //00000000000000000000000000000100
$places = 2;
$res = $val & $places; // 0 т.е. 00000000000000000000000000000000
p($res, $val, '&', $places, '& - and(и)', $res);

echo "\n--- СДВИГ ВПРАВО НАД ПОЛОЖИТЕЛЬНЫМИ ЦЕЛЫМИ ЧИСЛАМИ ---\n";

$val = 4;
$places = 1;
$res = $val >> $places; // вообще да. срабатывает. 4/2n
p($res, $val, '>>', $places, 'слева была вставлена копия знакового бита', $res);

$val = 4;
$places = 2;
$res = $val >> $places; //1 короче формула 4/2n
p($res, $val, '>>', $places);

$val = 4;
$places = 3;
$res = $val >> $places; // 0 т.е. 4/2n и берем целочисленный остаток
p($res, $val, '>>', $places, 'биты были выдвинуты за правый край');

$val = 4;
$places = 4;
$res = $val >> $places;
p($res, $val, '>>', $places, 'то же, что и выше; нельзя сдвинуть дальше 0');


$val = 4;
$places = 4;
$res = $val >> $places;
p($res, $val, '>>', $places, 'то же, что и выше; нельзя сдвинуть дальше 0');

echo "\n--- СДВИГ ВПРАВО НАД ОТРИЦАТЕЛЬНЫМИ ЦЕЛЫМИ ЧИСЛАМИ ---\n";

$val = -4; //11111111111111111111111111111100
$places = 1;
$res = $val >> $places; //-2 т.е. 11111111111111111111111111111110
p($res, $val, '>>', $places, 'слева была вставлена копия знакового бита');

$val = -4; //11111111111111111111111111111100
$places = 2;
$res = $val >> $places; //-1 т.е. 11111111111111111111111111111111
p($res, $val, '>>', $places, 'биты были выдвинуты за правый край');

$val = -4; //11111111111111111111111111111100
$places = 3;
$res = $val >> $places; //-1 т.е. 11111111111111111111111111111111
p($res, $val, '>>', $places, 'то же, что и выше; нельзя сдвинуть дальше -1');


echo "\n--- СДВИГ ВЛЕВО НАД ПОЛОЖИТЕЛЬНЫМИ ЦЕЛЫМИ ЧИСЛАМИ ---\n";

$val = 4; //00000000000000000000000000000100
$places = 1;
$res = $val << $places;//8 т.е. * 2n т.е. 00000000000000000000000000001000
p($res, $val, '<<', $places, 'правый край был дополнен нулями');

$val = 4; //00000000000000000000000000000100
$places = (PHP_INT_SIZE * 8) - 4; //28
$res = $val << $places; //1073741824 т.е. 01000000000000000000000000000000
p($res, $val, '<<', $places);

$val = 4; //00000000000000000000000000000100
$places = (PHP_INT_SIZE * 8) - 3; //29
$res = $val << $places; //-2147483648 т.е. 10000000000000000000000000000000
p($res, $val, '<<', $places, 'знаковые биты были выдвинуты');

$val = 4; //00000000000000000000000000000100
$places = (PHP_INT_SIZE * 8) - 2; //30
$res = $val << $places; //0 т.е. 00000000000000000000000000000000
p($res, $val, '<<', $places, 'биты были выдвинуты за левый край');


echo "\n--- СДВИГ ВЛЕВО НАД ОТРИЦАТЕЛЬНЫМИ ЦЕЛЫМИ ЧИСЛАМИ ---\n";

$val = -4; //11111111111111111111111111111100
$places = 1;
$res = $val << $places;//-8 т.е. 11111111111111111111111111111000
p($res, $val, '<<', $places, 'правый край был дополнен нулями');

$val = -4; //11111111111111111111111111111100
$places = (PHP_INT_SIZE * 8) - 3; //29
$res = $val << $places; //-2147483648  10000000000000000000000000000000
p($res, $val, '<<', $places);

$val = -4; //11111111111111111111111111111100
$places = (PHP_INT_SIZE * 8) - 2; //30
$res = $val << $places; //0 00000000000000000000000000000000
p($res, $val, '<<', $places, 'биты были выдвинуты за левый край, включая знаковый бит');


/*
 * Не обращайте внимания на этот нижний раздел кода,
 * это просто форматирование для более ясного вывода.
 */

function p($res, $val, $op, $places, $note = '', $shift) {
        
    $format= 'На %2$s сидят %1$32d обезьян';
    $ff =  sprintf($format, 5, 'дереве'); // На дереве сидят                                5 обезьян
    
    // вот и отличие. 32d от 032d Заполнение нулями
    $format= 'На %2$s сидят %1$032d обезьян';
    $ff =  sprintf($format, 5, 'дереве'); // На дереве сидят 00000000000000000000000000000005 обезьян

    $msg = sprintf("Выражение: %d = %d %s %d\n", $res, $val, $op, $places);
    
    echo $msg;
    echo " Десятичный вид:\n";
    
    $msg1 = sprintf("  val=%d\n", $val);
    $msg2 = sprintf("  shift=%d\n", $res);
    
    $st = PHP_INT_SIZE;
    $format = '%0' . (PHP_INT_SIZE * 8) . "b\n";
    
    echo "$msg1 \n $msg2";
    echo " Двоичный вид:\n";
    
    ////если $format = %32b то  val=                             100
    ///если $format = %032b то val = 00000000000000000000000000000100 очевидно 0 после % указывает, 
    //чтобы пустые значения заполнялись нулями. Как то так. 
    $msg3 = sprintf('  val=' . $format, $val); // исх val=00000000000000000000000000000100
    $msg4 = sprintf('  res=' . $format, $res); // результат res=00000000000000000000000000000010
    $msg0 = sprintf(' %2$s %d', $places, $op); // смещение 1 >> 
    echo "$msg3 \n $msg4"; 
    
    if ($note) {
        echo " ЗАМЕЧАНИЕ: $note\n";
    }

    echo "\n";
}
?>
